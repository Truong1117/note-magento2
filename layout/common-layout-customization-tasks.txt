Common layout customization tasks

I. Set the page layout

~ The type of page layout to be used for a certain page is defined in the page configuration file, 
in the layout attribute of the root <page> node.

~ Example: Change the layout of Advanced Search page from default “1-column” to “2-column with left bar”. 
To do this, extend catalogsearch_advanced_index.xml in your theme by adding the following layout:

<page layout="2columns-left" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
...
</page>

~~~~~~~~~~~~~~~~~~~~~~~~
II. Include static resources (JavaScript, CSS, fonts)

~ JavaScript, CSS, and other static assets are added in the <head> section of a page configuration file. 
The default look of a Magento store page <head> is defined by 
app/code/Magento/Theme/view/frontend/layout/default_head_blocks.xml. 
The recommended way to add CSS and JavaScript is to extend this file in your custom theme, 
and add the assets there. The following file is a sample of a file you must add:

<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
  <head>
    <!-- Add local resources -->
    <css src="css/my-styles.css"/>
    <!-- The following two ways to add local JavaScript files are equal -->
    <script src="Magento_Catalog::js/sample1.js"/>
    <link src="js/sample.js"/>
    <!-- Add external resources -->
    <css src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css" src_type="url" />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js" src_type="url" />
    <link rel="stylesheet" type="text/css" src="http://fonts.googleapis.com/css?family=Montserrat" src_type="url" />
  </head>
</page>

~ When adding external resources, specifying the src_type="url" argument value is a must.

~ You can use either the <link src="js/sample.js"/> or <script src="js/sample.js"/> 
instruction to add a locally stored JavaScript file to your theme.

~ The path to assets is specified relatively to one the following locations:

	~~ <theme_dir>/web-

	~~ <theme_dir>/<Namespace>_<Module>/web-

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
III. Adding conditional comments

~ Conditional comments are meant to give special instructions for Internet Explorer. 
In the terms of adding assets, you can add CSS files to be included for a specific version
 of Internet Explorer. A sample follows:

<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
  <head>
    <css src="css/ie-9.css" ie_condition="IE 9" />
  </head>
</page>

~ This adds an IE conditional comment in the generated HTML, like in the following example:

<!--[if IE 9]>
<link rel="stylesheet" type="text/css" media="all" href="<your_store_web_address>/pub/static/frontend/OrangeCo/orange/en_US/css/ie-9.css" />
<![endif]-->

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IV. Remove static resources (JavaScript, CSS, fonts)

~ To remove the static resources, linked in a page <head>, make a change similar to the following in a theme extending

app/design/frontend/<Vendor>/<theme>/Magento_Theme/layout/default_head_blocks.xml:

<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
   <head>
    <!-- Remove local resources -->
    <remove src="css/styles-m.css" />
    <remove src="my-js.js"/>
    <remove src="Magento_Catalog::js/compare.js" />
    <!-- Remove external resources -->
    <remove src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css"/>
    <remove src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"/>
    <remove src="http://fonts.googleapis.com/css?family=Montserrat" />
   </head>
</page>

~ Note, that if a static asset is added with a module path (for example Magento_Catalog::js/sample.js) 
in the initial layout, you need to specify the module path as well when removing the asset.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
V. Add meta tags to the head block

~ To add <meta> tags to the <head> element of your layout, create a theme-extending file similar to: 
app/design/frontend/<Vendor>/<theme>/Magento_Theme/layout/default_head_blocks.xml.

~ By default, the class that renders the <meta> tags is \Magento\Framework\View\Page\Config\Renderer. 
This class can render five meta types and a catch-all (the default).]

og:
charset
content_type
x_ua_compatible
media_type
“default” case

~ Examples: Use the following examples to include in your own layout themes.

<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
   <head>
    <!-- This will create a tag like '<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">' -->
    <meta name="x_ua_compatible" content="IE=edge,chrome=1"/>
    <!-- This will create a tag like '<meta property="og:type" content="article"/>'' -->
    <meta name="og:type" content="article"/>
    <!-- This will create a tag like '<meta charset="UTF-8">' -->
    <meta name="charset" content="UTF-8"/>
    <!-- This will create a tag like '<meta http-equiv="Content-Type" content="content-type-value"/>' -->
    <meta name="content_type" content="content-type-value"/>
    <!-- This tag will not render (see \Magento\Framework\View\Page\Config\Renderer for details) -->
    <meta name="media_type" content="any-value"/>
    <!-- This will create a tag like '<meta name="my_custom_type" content="my_custom_value"/>' -->
    <meta name="my_custom_type" content="my_custom_value"/>
   </head>
</page>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VI. Create a container:

Use the following sample to create (declare) a container:

<container name="some.container" as="someContainer" label="Some Container" htmlTag="div" htmlClass="some-container" />

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VII. Reference a container

~ To update a container use the <referenceContainer> instruction.

~ Example: add links to the page header panel.

<referenceContainer name="header.panel">
  <block class="Magento\Framework\View\Element\Html\Links" name="header.links">
    <arguments>
      <argument name="css_class" xsi:type="string">header links</argument>
    </arguments>
  </block>
</referenceContainer>

~ To wrap div or block using container see example:

<container name="some.container" as="someContainer" label="Some Container" htmlTag="div" htmlClass="some-container">
  <block class="Magento\Framework\View\Element\Html\Links" name="header.links">
    <arguments>
      <argument name="css_class" xsi:type="string">header links</argument>
    </arguments>
  </block>
</container>

~ To add new classes to the container:

<referenceContainer name="page.wrapper" htmlClass="my-new-page-wrapper-class second-class"/>

~ To add a new ID to the container:

<referenceContainer name="page.wrapper" htmlId="MyWrapper"/>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VIII. Create a block
Blocks are created (declared) using the <block> instruction.

Example: add a block with a product SKU information.

<block class="Magento\Catalog\Block\Product\View\Description" name="product.info.sku" template="product/view/attribute.phtml" after="product.info.type">
  <arguments>
    <argument name="at_call" xsi:type="string">getSku</argument>
    <argument name="at_code" xsi:type="string">sku</argument>
    <argument name="css_class" xsi:type="string">sku</argument>
  </arguments>
</block>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IX. Set body attributes

To set attributes for the HTML body tag use the <attribute> instruction.

~ Example: Add a new class to the body tag.

    <body>
        <attribute name="class" value="my-new-body-class"/>
    </body>

~ Example: Add a custom attribute to the body tag.

<page>
    <body>
        <attribute name="data-role" value="my-body-role"/>
    </body>
</page>


~ Example: Add an id to the body tag.

<page>
    <body>
        <attribute name="id" value="my-new-body-id"/>
    </body>
</page>

~ Example: Add an inline style to the body tag.

<page>
    <body>
        <attribute name="style" value="opacity:0;"/>
    </body>
</page>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
X. Reference a block

~ To update a block use the <referenceBlock> instruction.

Example: pass the image to the logo block.

<referenceBlock name="logo">
  <arguments>
    <argument name="logo_file" xsi:type="string">images/logo.png</argument>
  </arguments>
</referenceBlock>

~ To add a new class to the block:

<referenceBlock name="page.main.title">
    <arguments>
        <argument name="css_class" xsi:type="string">my-new-block-class</argument>
    </arguments>
</referenceBlock>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XI. Reference a CMS block

A CMS block is injected into the layout by using the Magento/Cms/Block/Block class 
with the block_id argument. Any block or container can be used as a reference.

<referenceContainer name="content.bottom">
    <block class="Magento\Cms\Block\Block" name="block_identifier">
        <arguments>
            <!-- Here is the CMS Block id -->
            <argument name="block_id" xsi:type="string">my_cms_block_identifier</argument>
        </arguments>
    </block>
</referenceContainer>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XII. Making the block visibility dynamic
~ Any block can be configured to show or not based on a Magento/Config/Model/Config/Source/Yesno 
system configuration field, using the ifconfig argument. For the value, use the XPath to the needed field.

<block class="Namespace\Module\Block\Type" name="block.example" ifconfig="my/yesno/field">
    ...
</block>

~ The visibility can also be adjusted using the ACL Resource. Although it is used mostly in the admin area,
the same approach works for the storefront as well.

<block class="Namespace\Module\Block\Type" name="block.example" aclResource="Vendor_ModuleName::acl_name">
    <!-- ... -->
</block>

In the admin area, this is implemented for global search and for admin notification list.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XIII. Set the template used by a block

There are two ways to set the template for a block:
	~ using the template attribute

	~ using the <argument> instruction

Both approaches are demonstrated in the following examples of changing the template of the page title block.

Example 1:
<referenceBlock name="page.main.title" template="%Namespace_Module::new_template.phtml%"/>

Example 2:

 <referenceBlock name="page.main.title">
   <arguments>
     <argument name="template" xsi:type="string">%Namespace_Module::new_template.phtml%</argument>
   </arguments>
 </referenceBlock>

In both examples, the template is specified according to the following:

	~ Namespace_Module: defines the module the template belongs to. For example, Magento_Catalog.

	~ new_template.phtml: the path to the template relatively to the templates directory. 

It might be <module_dir>/view/<area>/templates or <theme_dir>/<Namespace_Module>/templates.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XIV. Modify block arguments

~ To modify block arguments, use the <referenceBlock> instruction.

Example: change the value of the existing block argument and add a new argument.

~ Initial block declaration:
	
<block class="Namespace_Module_Block_Type" name="block.example">
  <arguments>
    <argument name="label" xsi:type="string">Block Label</argument>
  </arguments>
</block>

~ Extending layout:

<referenceBlock name="block.example">
  <arguments>
    <!-- Modified block argument -->
    <argument name="label" xsi:type="string">New Block Label</argument>
    <!-- Newly added block argument -->
    <argument name="custom_label" xsi:type="string">Custom Block Label</argument>
  </arguments>
</referenceBlock>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
XV. Rearrange elements
































