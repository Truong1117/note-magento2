I. Strings added in .phtml templates

To ensure that your new string is added to the dictionary and translated, use the __('<your_string>') method when outputting a string in 
a .phtml template.

For example:

<?= __('Create Backup') ?>

If your string contains a variable, to add a placeholder for this variable in the dictionary, use syntax similar to the following:

<?= __('Hello %1', $yourVariable) ?>

In this example, the ‘Hello %1’ string is added to the dictionary when the i18n tool is run.

~~~~~~~~~~~~~~~~~~~~~
II. Strings added in email templates

 If your theme contains custom email templates, their strings can be added to the dictionary as well. 
To add the email template strings to the dictionary, use the {{trans}} directive.

 Custom email templates added using the Admin panel are not stored in the file system, and their strings are not added to the dictionary.

 To ensure that your new string is added to the dictionary and translated, use the {{trans}} directive when outputting a string in an email template.

 For example:

~ When only a string is added in the email template:

 {{trans "Lorem Ipsum is simply dummy text of the printing"}}

~ When only a string is added with a variable value in the email template:

 {{trans "%items items" items="numItems"}}

~~~~~~~~~~~~~~~~~~~~~~~~~~~
III. Strings added in UI component templates

To ensure that the text you add in .html templates of UI components is added to the dictionary, mark the text using the i18n custom binding. 
The following code samples illustrate how to use custom bindings:

~ When a string is added in the scope of an HTML element, both of the following examples result in the same output:

<span data-bind="i18n: 'Sign In'"></span>

<span translate="'Sign In'"></span>

~ When a string is added with no binding to an HTML element, both of the following examples result in the same output:

<!-- ko i18n: 'You have no items in your shopping cart.' --><!-- /ko -->

<translate args="'You have no items in your shopping cart.'"/>

~ When a string is added as an attribute of an HTML element:

<input type="text" data-bind="attr: {placeholder: $t('First Name')}" />

~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IV. Strings added in UI components configuration files

To ensure that the text you add in UI components configuration .xml files is added to the dictionary, use the translate attribute. 
Set the attribute to true for the corresponding element: translate=true

In this example, the Delete string is added to the dictionary when the i18n tool is run:

<item name="label" xsi:type="string" translate="true">Delete</item>

Translated strings that originate from .xml files will not render unless they are called with a __(<variable>) method in .php files. 
In this example, you would use a call similar to the following to display the translated Delete string.

__($this->config->getData('label'))

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
V. Strings added in Underscore templates

To ensure that the text you add in .html Underscore templates is collected by the i18n tool, use the _.i18n('') Underscore function.

~ When a string is added to the template:

<%= _.i18n('Hello') %>

~ If the string contains a variable, use the variable placeholder:

<%= _.i18n('Hello %1').replace('%1', yourVariable) %>

In this example, the ‘Hello %1’ string is added to the dictionary when the i18n tool is run.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VI. Strings added in .js files

To ensure that the text you add in a .js file is collected by the i18n tool and added to the dictionary:

1. Link the mage/translate library:

define (['jquery', 'mage/translate'], function ($) {...});

2. Use the $.mage.__('') function when adding a string:

$.mage.__('<string>');

If your string contains a variable, to add a placeholder for this variable to the string stored in the dictionary, 
use the syntax similar to the following:

$.mage.__('Hello %1').replace('%1', yourVariable);

In this example, the 'Hello %1' string is added to the dictionary when the i18n tool is run.




















